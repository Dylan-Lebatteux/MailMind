import 'package:speech_to_text/speech_to_text.dart';
import 'package:permission_handler/permission_handler.dart';

/// Service de reconnaissance vocale (Speech-to-Text)
class VoiceService {
  final SpeechToText _speechToText = SpeechToText();
  bool _isInitialized = false;
  bool _isListening = false;
  String? _selectedLocale;
  List<LocaleName> _availableLocales = [];

  /// V√©rifie si le service est initialis√©
  bool get isInitialized => _isInitialized;

  /// V√©rifie si le micro est en cours d'√©coute
  bool get isListening => _isListening;

  /// Initialise le service de reconnaissance vocale
  /// [preferredLocale] - Langue pr√©f√©r√©e (optionnel, depuis les pr√©f√©rences)
  Future<bool> initialize({String? preferredLocale}) async {
    try {
      // V√©rifier et demander la permission du micro
      final status = await Permission.microphone.request();
      if (!status.isGranted) {
        print('‚ùå Permission du microphone refus√©e');
        return false;
      }

      // Initialiser Speech-to-Text avec debug activ√©
      _isInitialized = await _speechToText.initialize(
        onError: (error) => print('‚ùå Erreur Speech-to-Text: $error'),
        onStatus: (status) => print('üìä Status Speech-to-Text: $status'),
        debugLogging: true, // Active les logs d√©taill√©s
      );

      // V√©rifier les langues disponibles
      if (_isInitialized) {
        _availableLocales = await _speechToText.locales();
        print('üåç Langues disponibles: ${_availableLocales.length}');

        // Utiliser la langue pr√©f√©r√©e si sp√©cifi√©e, sinon auto-d√©tection
        if (preferredLocale != null && preferredLocale.isNotEmpty) {
          _selectedLocale = preferredLocale;
          print('‚úÖ Langue forc√©e (depuis pr√©f√©rences): $_selectedLocale');
        } else {
          // Chercher fran√ßais en priorit√© pour auto-d√©tection
          final frenchLocale = _availableLocales.firstWhere(
            (l) => l.localeId.startsWith('fr'),
            orElse: () => _availableLocales.firstWhere(
              (l) => l.localeId.startsWith('en'),
              orElse: () => _availableLocales.first,
            ),
          );
          _selectedLocale = frenchLocale.localeId;
          print('‚úÖ Langue auto-d√©tect√©e: $_selectedLocale (${frenchLocale.name})');
        }
      }

      return _isInitialized;
    } catch (e) {
      print('‚ùå Erreur lors de l\'initialisation du micro: $e');
      return false;
    }
  }

  /// R√©cup√®re la liste des langues disponibles
  Future<List<String>> getAvailableLocales() async {
    if (!_isInitialized) {
      await initialize();
    }
    return _availableLocales.map((l) => l.localeId).toList();
  }

  /// Change la langue de reconnaissance vocale
  void setLocale(String? locale) {
    _selectedLocale = locale;
    if (locale != null) {
      print('üåç Langue chang√©e: $locale');
    } else {
      print('üåç Langue: Auto-d√©tection');
    }
  }

  /// D√©marre l'√©coute vocale
  /// [onResult] - Callback appel√© avec le texte reconnu
  /// [locale] - Langue de reconnaissance (utilise la langue sauvegard√©e si null)
  Future<void> startListening({
    required Function(String) onResult,
    String? locale,
  }) async {
    if (!_isInitialized) {
      print('‚ùå VoiceService non initialis√©');
      return;
    }

    if (_isListening) {
      print('‚ö†Ô∏è D√©j√† en cours d\'√©coute');
      return;
    }

    final localeToUse = locale ?? _selectedLocale ?? 'en_US';

    try {
      // Convertir le format de locale si n√©cessaire (fr_FR -> fr-FR)
      final androidLocale = localeToUse.replaceAll('_', '-');
      print('üé§ D√©marrage de l\'√©coute avec locale: $androidLocale');

      await _speechToText.listen(
        onResult: (result) {
          print('üìù R√©sultat re√ßu: "${result.recognizedWords}" (final: ${result.finalResult}, confidence: ${result.confidence})');
          // Envoyer les r√©sultats partiels et finaux
          if (result.recognizedWords.isNotEmpty) {
            onResult(result.recognizedWords);
          }
        },
        localeId: androidLocale,
        // Mode dictation pour une √©coute continue
        listenFor: const Duration(seconds: 30),
        pauseFor: const Duration(seconds: 5),
        cancelOnError: false,
        partialResults: true,
        // NOUVEAU: Forcer la langue sans auto-d√©tection
        onDevice: false, // Utiliser le cloud pour meilleure pr√©cision
        listenMode: ListenMode.confirmation, // Mode qui attend confirmation
        sampleRate: 16000, // Qualit√© audio standard
      );

      _isListening = true;
      print('‚úÖ √âcoute d√©marr√©e avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors du d√©marrage de l\'√©coute: $e');
    }
  }

  /// Arr√™te l'√©coute vocale
  Future<void> stopListening() async {
    if (!_isListening) {
      return;
    }

    try {
      await _speechToText.stop();
      _isListening = false;
      print('‚èπÔ∏è √âcoute arr√™t√©e');
    } catch (e) {
      print('‚ùå Erreur lors de l\'arr√™t de l\'√©coute: $e');
    }
  }

  /// Annule l'√©coute en cours
  Future<void> cancel() async {
    if (!_isListening) {
      return;
    }

    try {
      await _speechToText.cancel();
      _isListening = false;
      print('üö´ √âcoute annul√©e');
    } catch (e) {
      print('‚ùå Erreur lors de l\'annulation: $e');
    }
  }

  /// V√©rifie si la reconnaissance vocale est disponible sur l'appareil
  Future<bool> isAvailable() async {
    try {
      return await _speechToText.initialize();
    } catch (e) {
      return false;
    }
  }

  /// Lib√®re les ressources
  void dispose() {
    _speechToText.cancel();
  }
}
